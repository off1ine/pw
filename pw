#!/bin/bash

#########################################################################
##
## Welcome to the Automatic Password Creator!
##
## In order to use this script, simply add a phrase after the 'pw' command. For example:
##
##  pw twitt3r
##
## (If you don't give the phrase as an argument, we will ask for it.)
## The script will then ask for a key. This can be any combination of integers and letters and should be at least 6 figures (in order to get a sufficiently long password). 
## Make sure this key is secret and remains the same so you are able to reconstruct the password if you have to, for example:
##
##  123abc      (don't actually use that, though!)
## 
## Construction of the resulting password construction works as follows:
## - Cycle through characters in phrase.
## - Alternate between adding and subtracting the number values of key to/from phrase character values (a=1, b=2, etc.)
## - Turn result back into letter.
## - Every second character is upper case.
## - After every second character, add sum of letter values of two preceding characters.
## - If sum is greater than 16, display as hex, otherwise display cross sum as decimal.
##
## For our example phrase "twitter" and the example key "123456abc" this would result in the following password:
## 
##   uU2alS1fvZ2e!
##
## Let's deconstruct that!
##
## - adding the first character's value (1) of our key to the first letter of our phrase (t) makes "u"
## - subtracting the second key character's value (2) from the second phrase character's value (w) makes "U" (remember, we capitalize every second letter!)
## - the sum of the previous two character's values (u + U = 21 + 21 = 42) is greater than 16, so we produce the hex-value "2a"
## - adding the third key character's value (3) to the third phrase character (i) makes "l"
## - subtracting the fourth key character's value (1) from the fourth phrase character (t) makes "S"
## - the sum of the previous two character's values (l + S = 12 + 19 = 31) is greater than 16, so we produce the hex-value "1f"
## - adding the fifth key character's value (2) to the fifth phrase character's value (t) makes "v"
## - subtracting the sixth key character's value (3) from the sixth phrase character (3) makes 0 which turns back into 26 = "Z"
## - the sum of the previous two character's values (v + Z = 22 + 26 = 48) is greater than 16, so we produce the hex-value "2e"
## - lastly, we add an exclamation point for good measure and to satisfy password policies requiring special characters - and voilÃ : uU2alS1fvZ2e!
##
#########################################################################



##################
# We need some input, first. Phrase and Key, please! We will try to grab it from arguments.
##################

phrase=$1

##################
# If phrase is not used as argument, let's ask for it - and clean up our inputs. Lowercase only and no spaces!
##################

if [[ -z $phrase ]]; then
	echo
	echo -e "Phrase\n(Letters or numbers only, no special characters. Spaces are allowed but will be removed.):"
	read phrase
fi
echo

phrase=${phrase,,}
phrase=${phrase//[[:space:]]/}

echo -e "Key\n(Letters or numbers only, no special characters. Spaces are allowed but will be removed.):"
read -s key
echo

key=${key//[[:space:]]/}


##################
# Build two dictionaries, one for letters, one for numbers
##################

declare -A letters

letters[a]="1"
letters[b]="2"
letters[c]="3"
letters[d]="4"
letters[e]="5"
letters[f]="6"
letters[g]="7"
letters[h]="8"
letters[i]="9"
letters[j]="10"
letters[k]="11"
letters[l]="12"
letters[m]="13"
letters[n]="14"
letters[o]="15"
letters[p]="16"
letters[q]="17"
letters[r]="18"
letters[s]="19"
letters[t]="20"
letters[u]="21"
letters[v]="22"
letters[w]="23"
letters[x]="24"
letters[y]="25"
letters[z]="26"

declare -A numbers

numbers[1]="a"
numbers[2]="b"
numbers[3]="c"
numbers[4]="d"
numbers[5]="e"
numbers[6]="f"
numbers[7]="g"
numbers[8]="h"
numbers[9]="i"
numbers[10]="j"
numbers[11]="k"
numbers[12]="l"
numbers[13]="m"
numbers[14]="n"
numbers[15]="o"
numbers[16]="p"
numbers[17]="q"
numbers[18]="r"
numbers[19]="s"
numbers[20]="t"
numbers[21]="u"
numbers[22]="v"
numbers[23]="w"
numbers[24]="x"
numbers[25]="y"
numbers[26]="z"

##################
# Start with some basics - phrase and keys at i
# Include previous values for i > 1 (we will need these later for some sums!)
##################


for ((i=1; i<=${#key}; i++))	
	do
##################	
# If key is longer than phrase, loop through phrase again
##################

		if [[ $i>${#phrase} ]]; then
			phrase_i=${phrase:$i-${#phrase}-1:1}

			if [[ $i -gt 1 ]]; then
				phrase_i_prev=${phrase:$i-${#phrase}-2:1}
			else
				phrase_i_prev=""
			fi
		else
			phrase_i=${phrase:$i-1:1};
			
	 		if [[ $i -gt 1 ]]; then
	 			phrase_i_prev=${phrase:$i-2:1};
	 		else
	 			phrase_i_prev=""
	 		fi
	 	fi
	 		 	
 		key_i=${key:$i-1:1}
 		
 		if [[ $i -gt 1 ]]; then
 			key_i_prev=${key:$i-2:1}
 		else
 			key_i_prev=""
 		fi
 								
##################
# Define Regex looking for numbers (in phrase)
##################

reP='^[a-z]+$'		

##################
# Define Regex looking for letters (in key)
##################

reK='^[0-9]+$' 														

##################
# Get letter value from phrase at i
# Get passphrase letter from addition/subtraction of key at i
##################
		
		if ! [[ $phrase_i =~ $reP ]]; then
			phrase_num=$phrase_i
		else
		 	phrase_num=${letters[$phrase_i]}
		fi
		if ! [[ $key_i =~ $reK ]] ; then
			key_i=${letters[$key_i]}
		else
			key_i=$key_i
		fi
		if [[ $i%2 -eq 0 ]]; then
			pwd_num=$(($phrase_num-key_i))
		else
			pwd_num=$(($phrase_num+key_i))
		fi
		
		pwd_sum=""
		
##################		
# If pwd_num is greater than 26, count up from 1
# If it's less than zero, count back from 26
# If it's between 1 and 26, do nothing
##################		

		if [[ $pwd_num -gt 26 ]]; then
			pwd_num=$(($pwd_num-26))
		elif [[ $pwd_num -le 0 ]]; then
			pwd_num=$((26-($pwd_num*-1)))
		elif [[ $pwd_num -gt 0 ]] && [[ $pwd_num -le 26 ]]; then
			pwd_num=$pwd_num
		fi



	 	pwd_num_prev=""
	 	
##################		
# Check if i > 1 and get previous values
# If pwd_num_prev is greater than 26, count up from 1
# If it's less than zero, count back from 26
# If it's between 1 and 26, do nothing
##################
	 	
 		if [[ $i -gt 1 ]]; then
 			if ! [[ $phrase_i_prev =~ $reP ]]; then
 				phrase_num_prev=$phrase_i_prev
 			else
 				phrase_num_prev=${letters[$phrase_i_prev]}
 			fi
 			
 			if [[ $i%2 -eq 0 ]]; then
 				pwd_num_prev=$(($phrase_num_prev+$key_i_prev))
 			else
				pwd_num_prev=$(($phrase_num_prev-$key_i_prev))
			fi
					
			if [[ $pwd_num_prev -gt 26 ]]; then
				pwd_num_prev=$(($pwd_num_prev-26))
			elif [[ $pwd_num_prev -le 0 ]]; then
				pwd_num_prev=$((26-($pwd_num_prev*-1)))
			elif [[ $pwd_num_prev -gt 0 ]] && [[ $pwd_num_prev -le 26 ]]; then
				pwd_num_prev=$pwd_num_prev
			fi
			
			if [[ $pwd_num -gt 26 ]]; then
				pwd_num=$(($pwd_num-26))
			elif [[ $pwd_num -le 0 ]]; then
				pwd_num=$((26-($pwd_num*-1)))
			elif [[ $pwd_num -gt 0 ]] && [[ $pwd_num -le 26 ]]; then
				pwd_num=$pwd_num
			fi
		

##################		
# $pwd_sum is displayed after each to pwd characters, adding the values of the past two letters. 
##################
		
			pwd_sum=$(($pwd_num+$pwd_num_prev))
			
##################		
# If pwd_sum is greater than 16, display as hex value...
##################
			
			if [[ $pwd_sum -gt 16 ]]; then
				pwd_sum=$( printf '%x\n' $pwd_sum )
			else
			
##################		
# ...otherwise display cross sum
##################
				while [[ ${#pwd_sum}>1 ]]; do
					pwd_sum=$(($(echo $pwd_sum | sed -e 's/\(.\)/\1\ +\ /g') 0))
				done
			fi
 		fi 				

################## 		
# Check if i mod 2 = 0 and get previous values. Display every second pwd_char as upper case.
##################

		if [[ $i%2 -eq 0 ]]; then
			pwd_char=$pwd_char${numbers[$pwd_num]^}$pwd_sum
		else
			pwd_char=$pwd_char${numbers[$pwd_num]}
		fi	
	done
	
##################	
# Add a little pizzazz with a "!"
##################
echo "Your password: "$pwd_char"!" 

